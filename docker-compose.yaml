version: '3.8'
services:
  localstack:
    image: localstack/localstack:latest
    container_name: message-blaster-localstack
    ports:
      - "4566:4566"
      - "4571:4571"
    environment:
      - SERVICES=sqs
      - DEFAULT_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=fake
      - AWS_SECRET_ACCESS_KEY=fake
      - DEBUG=1
    volumes:
      - "./.localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: mb-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: mb-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    container_name: mb-schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.6.1
    container_name: mb-kafka-connect
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: 'mb-connect-cluster'
      CONNECT_CONFIG_STORAGE_TOPIC: 'mb_connect_configs'
      CONNECT_OFFSET_STORAGE_TOPIC: 'mb_connect_offsets'
      CONNECT_STATUS_STORAGE_TOPIC: 'mb_connect_statuses'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.storage.StringConverter'
      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/plugins'
      CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
    volumes:
      - ./connect-plugins:/etc/kafka-connect/plugins
      - ./connectors:/connectors

  connect-init:
    image: curlimages/curl:8.10.1
    container_name: mb-connect-init
    depends_on:
      - kafka-connect
    volumes:
      - ./connectors:/connectors:ro
    entrypoint: ["sh", "-c"]
    command:
      - |
        set -e
        echo "Waiting for Kafka Connect..."
        until curl -s http://kafka-connect:8083/connectors >/dev/null; do \
          echo "  still waiting..."; sleep 2; \
        done
        echo "Posting connector config from /connectors/sqs-sink.json"
        curl -s -X PUT -H 'Content-Type: application/json' \
          --data @/connectors/sqs-sink.json \
          http://kafka-connect:8083/connectors/sqs-sink/config | sed -e 's/.*/  &/'
        # Keep container running for visibility (optional)
        tail -f /dev/null
